// Code generated by MockGen. DO NOT EDIT.
// Source: contact.go

// Package handler is a generated GoMock package.
package handler

import (
	models "contacts-crud/cmd/contacts/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIContactService is a mock of IContactService interface.
type MockIContactService struct {
	ctrl     *gomock.Controller
	recorder *MockIContactServiceMockRecorder
}

// MockIContactServiceMockRecorder is the mock recorder for MockIContactService.
type MockIContactServiceMockRecorder struct {
	mock *MockIContactService
}

// NewMockIContactService creates a new mock instance.
func NewMockIContactService(ctrl *gomock.Controller) *MockIContactService {
	mock := &MockIContactService{ctrl: ctrl}
	mock.recorder = &MockIContactServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIContactService) EXPECT() *MockIContactServiceMockRecorder {
	return m.recorder
}

// AddContact mocks base method.
func (m *MockIContactService) AddContact(contact models.Contact) (*models.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddContact", contact)
	ret0, _ := ret[0].(*models.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddContact indicates an expected call of AddContact.
func (mr *MockIContactServiceMockRecorder) AddContact(contact interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContact", reflect.TypeOf((*MockIContactService)(nil).AddContact), contact)
}

// GetAllContacts mocks base method.
func (m *MockIContactService) GetAllContacts() ([]*models.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllContacts")
	ret0, _ := ret[0].([]*models.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllContacts indicates an expected call of GetAllContacts.
func (mr *MockIContactServiceMockRecorder) GetAllContacts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllContacts", reflect.TypeOf((*MockIContactService)(nil).GetAllContacts))
}

// GetContact mocks base method.
func (m *MockIContactService) GetContact(id string) (*models.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContact", id)
	ret0, _ := ret[0].(*models.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContact indicates an expected call of GetContact.
func (mr *MockIContactServiceMockRecorder) GetContact(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContact", reflect.TypeOf((*MockIContactService)(nil).GetContact), id)
}

// UpdateContactStatus mocks base method.
func (m *MockIContactService) UpdateContactStatus(id string) (*models.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContactStatus", id)
	ret0, _ := ret[0].(*models.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContactStatus indicates an expected call of UpdateContactStatus.
func (mr *MockIContactServiceMockRecorder) UpdateContactStatus(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactStatus", reflect.TypeOf((*MockIContactService)(nil).UpdateContactStatus), id)
}
